|.arch x64
|.section code_op, code_sub
|
|.actionlist build_actionlist
|.globals GLOB_
|.globalnames globnames
|.externnames extnames
|
|.define X64, 1
|.if WIN
|.define X64WIN, 1
|.endif
|
|// Fixed register assignments for the interpreter.
|// This is very fragile and has many dependencies. Caveat emptor.
|// BASE caches the Lua function's base pointer (start of Lua registers)
|// This is volatile, i.e. must be refetched after any call that can
|// reallocate the Lua stack (typically any Lua api call)
|// KBASE caches the Lua function proto's constant table, this does not
|// change during the execution
|// PC caches the program counter (current bytecode location)
|// We need to ensure that the PC is saved before calling certain functions
|// DISPATCH points to the dispatch table which is located in the 
|// LG structure defined in lstate.h - this contains the computed goto
|// destinations
|.define BASE,		rdx		  // Not C callee-save, refetched anyway.
|.if X64WIN
|.define KBASE,		rdi		  // Must be C callee-save.
|.define PC,		rsi		    // Must be C callee-save.
|.define DISPATCH,	rbx		// Must be C callee-save.
|.else
|.define KBASE,		r15		  // Must be C callee-save.
|.define PC,		rbx		    // Must be C callee-save.
|.define DISPATCH,	r14		// Must be C callee-save.
|.endif
|
|.if X64WIN
| // On Win64, the first four integer arguments are passed in registers. Integer values are passed 
| // (in order left to right) in RCX, RDX, R8, and R9. Arguments five and higher are passed 
| // on the stack. All arguments are right-justified in registers. This is done so the callee 
| // can ignore the upper bits of the register if need be and can access only the portion 
| // of the register necessary.
| // Floating-point and double-precision arguments are passed in XMM0 - XMM3 (up to 4) 
| // with the integer slot (RCX, RDX, R8, and R9) that would normally be used for that cardinal 
| // slot being ignored (see example below) and vice versa.
| //   func3(int a, double b, int c, float d);    
| //   a in RCX, b in XMM1, c in R8, d in XMM3
| // For functions not fully prototyped, the caller will pass integer values as integers 
| // and floating-point values as double precision. For floating-point values only, both 
| // the integer register and the floating-point register will contain the float value 
| // in case the callee expects the value in the integer registers.
|.define CARG1,		rcx		// x64/WIN64 C call arguments.
|.define CARG2,		rdx
|.define CARG3,		r8
|.define CARG4,		r9
|.define CARG1d,	ecx
|.define CARG2d,	edx
|.define CARG3d,	r8d
|.define CARG4d,	r9d
|.else
|.define CARG1,		rdi		// x64/POSIX C call arguments.
|.define CARG2,		rsi
|.define CARG3,		rdx
|.define CARG4,		rcx
|.define CARG5,		r8
|.define CARG6,		r9
|.define CARG1d,	edi
|.define CARG2d,	esi
|.define CARG3d,	edx
|.define CARG4d,	ecx
|.define CARG5d,	r8d
|.define CARG6d,	r9d
|.endif
|
|// Type definitions. Some of these are only used for documentation.
|.type L,		lua_State
|.type GL,		global_State
|.type TVALUE,		TValue
|
|// Stack layout while in interpreter. 
|//-----------------------------------------------------------------------
|.if X64WIN		// x64/Windows stack layout
|
|.define CFRAME_SPACE,	aword*5			// Delta for rsp (see <--).
|.macro saveregs_
|  // The registers RBX, RBP, RDI, RSI, RSP, R12, R13, R14, and R15 are considered nonvolatile 
|  // and must be saved and restored by a function that uses them.
|  // There is always space to hold all parameters in the parameter area of the stack
|  // so that each register parameter has a home address. Even if a function has less
|  // than 4 parameters, at least 4 stack locatons is guaranteed and is owned by the
|  // called function even if it doesn't use it 
|  // All memory beyond the current address of RSP is considered volatile.
|  // A frame function is a function that allocates stack space, calls other functions, 
|  // saves nonvolatile registers, or uses exception handling. It also requires a 
|  // function table entry. A frame function requires a prolog and an epilog.
|  // home location for RCX is [RSP + 8]
|  // home location for RDX is [RSP + 16]
|  // home location for R8 is [RSP + 24]
|  // home location for R9 is [RSP + 32]
|  push rdi; push rsi; push rbx
|  push r12; push r13; push r14; push r15;
|  sub rsp, CFRAME_SPACE
|.endmacro
|.macro saveregs
|  push rbp; saveregs_
|.endmacro
|.macro restoreregs
|  add rsp, CFRAME_SPACE
|  pop r15; pop r14; pop r13; pop r12;
|  pop rbx; pop rsi; pop rdi; pop rbp
|.endmacro
|
|//-----------------------------------------------------------------------
|.else			// x64/POSIX stack layout
|
|.define CFRAME_SPACE,	aword*5			// Delta for rsp (see <--).
|.macro saveregs_
|  push rbp; push rbx; push r15; push r14; 
|  push r13; push r12
|  sub rsp, CFRAME_SPACE
|.endmacro
|.macro saveregs
|  push rbp; saveregs_
|.endmacro
|.macro restoreregs
|  add rsp, CFRAME_SPACE
|  pop r12; pop r13
|  pop r14; pop r15; pop rbx; pop rbp
|.endmacro
|
|.endif

/* Generate subroutines used by opcodes and other parts of the VM. */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx)
{
  |.code_sub
  |
  |//-----------------------------------------------------------------------
  |//-- Return handling ----------------------------------------------------
  |//-----------------------------------------------------------------------
  |
  |->vm_leave_unw:
  |  restoreregs
  |  ret
}
/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, OpCode op, int defop)
{
  int vk = 0;
  |// Note: aligning all instructions does not pay off.
  |=>defop:

  switch (op) {

  /* ---------------------------------------------------------------------- */

  default:
    fprintf(stderr, "Error: undefined opcode %d\n", (int)op); // luaP_opnames[op]);
    exit(2);
    break;
  }
}

static int build_backend(BuildCtx *ctx)
{
  int op;
  dasm_growpc(Dst, NUM_OPCODES);
  build_subroutines(ctx);
  |.code_op
  for (op = 0; op < NUM_OPCODES; op++)
    build_ins(ctx, (OpCode)op, op);
  return NUM_OPCODES;
}

